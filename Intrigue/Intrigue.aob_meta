{"basic_builder": {"appname": "Intrigue", "friendly_name": "Intrigue", "version": "1.0.0", "author": "Intrigue", "description": "", "theme": "#164573", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAChElEQVRYR+2WzYuNYRjGf9cMxWiiyWBngVlZKClFSpQVNrLyLyglCwssLJCkbJWlstAoycLHwsdimrJD0SgpizH5WPhqzNy6Ts9br9N7znPOcSaT3qemeet+Pn7PdV/3/RyxyIYWGQ81UC4jtUK1QjkFcvH/00MR0biYpMgpkIv3RaGImAfmJS3JHZiLVwJFxC3gqKR3uQ0cj4gfwKyk4U7mt5vTCsjSb5b0vLw4pcZK9EXZKrCOgAxif1QBFbFi88JPwHdJy6oObV5TntMWCLgNHAGeAkPATPr/FZgA7gIXgW/JQ8PJT97XKr8GXgJfgP2SRiLiM7ASGKgqghzQPWAUGEybb0jf08ArYC2w0QVmIOA8cDJ9+9AX6c9AByQNWWZgElgvyev/GJ0ArQEuAScAV9Gcbwc8AnYCjhvQQD+Bw/ZfArMahmoApfmTkgYb+a/wYidAD4Ep4FRSp2HqiHgM7JA0kG5tIMNuB8aA64CrtAx0DTgkad1CAY1Z9hLQR+BXUsRqrWoCshf3FjlaCIU2FbdNKXNKrZSHv980Ad0HdgFXUmc/3YuH2qWsCmgcOCdpIiLeJiB76SBgAMeWtmqOPXkI2AZcBpqBjgHHgT2SpiLC/hlJxnc3dyd3Spe7SCSd/SuFSgb2Pk9KQE6Ty7mcsmfABeAGcNX9rFT2Xj9X9fa1UsilbIPalLPpViskTUfEGeA9cDM1t5mI8Hy/9o67Z+0D7qRqtEpuA6tT3Cr5Mls6boy9PpAR8UHSaES4T1mBrt+8rhe0g03l/wDY6ufBKe72cv0G2g24tD2cok//FCj9NmoYW1LRj7pi6qtCXZ3cYnINlFOxVqhWKKdALr7oPPQbnihANMjxmCoAAAAASUVORK5CYII=", "visible": false, "tab_version": "3.0.1", "tab_build_no": "2", "build_no": 6}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "Intrigue_data_input", "interval": "28800", "use_external_validation": true, "streaming_mode_xml": true, "name": "Intrigue", "title": "Intrigue", "description": "", "type": "customized", "parameters": [{"name": "collection_name", "label": "Collection Name", "help_string": "Intrigue collection name", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "adm_EroCCmU"}, {"name": "item_type", "label": "Item Type", "help_string": "", "required": true, "possible_values": [{"value": "entities", "label": "Entities"}, {"value": "issues", "label": "Issues"}, {"value": "connections", "label": "Connections"}, {"label": "Typosquats", "value": "typosquats"}, {"label": "Vulnerabilities", "value": "vulnerabilities"}], "format_type": "dropdownlist", "default_value": "entities", "placeholder": "", "type": "dropdownlist", "value": "issues"}, {"name": "start_date", "label": "Start Date", "help_string": "Format: YYYY-MM-DD", "required": true, "format_type": "text", "default_value": "", "placeholder": "2001-01-01", "type": "text", "value": "2011-01-01"}, {"name": "access_key", "label": "Access Key", "help_string": "Intrigue Access Key ", "required": true, "format_type": "password", "default_value": "", "placeholder": "", "type": "password", "value": "8e12835b47f7e2dd89ac6a87b452"}, {"name": "secret_key", "label": "Secret Key", "help_string": "Intrigue Secret Key", "required": true, "format_type": "password", "default_value": "", "placeholder": "", "type": "password", "value": "dc96e1eb205713ff7dfc5353d8b5"}], "data_inputs_options": [{"type": "customized_var", "name": "collection_name", "title": "Collection Name", "description": "Intrigue collection name", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "item_type", "title": "Item Type", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "entities", "label": "Entities"}, {"value": "issues", "label": "Issues"}, {"value": "connections", "label": "Connections"}, {"label": "Typosquats", "value": "typosquats"}, {"label": "Vulnerabilities", "value": "vulnerabilities"}], "format_type": "dropdownlist", "default_value": "entities", "placeholder": ""}, {"type": "customized_var", "name": "start_date", "title": "Start Date", "description": "Format: YYYY-MM-DD", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": "2001-01-01"}, {"type": "customized_var", "name": "access_key", "title": "Access Key", "description": "Intrigue Access Key ", "required_on_edit": false, "required_on_create": true, "format_type": "password", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "secret_key", "title": "Secret Key", "description": "Intrigue Secret Key", "required_on_edit": false, "required_on_create": true, "format_type": "password", "default_value": "", "placeholder": ""}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport json\nimport datetime\n\n\nclass Header:\n\n    def __init__(self, access_key, secret_key):\n\n        self.Authorization = {\n            \"INTRIGUE_ACCESS_KEY\": access_key,\n            \"INTRIGUE_SECRET_KEY\": secret_key\n        }\n\n\nclass UrlBuilder:\n    def build(self):\n        return \"https://app.intrigue.io/api/collections/{}/export/{}/from_date/{}/\".format(self.collection, self.issueType, self.startDate)\n\n    def __init__(self, collection, issueType, startDate):\n\n        self.collection = collection\n        self.issueType = issueType\n        self.startDate = startDate\n\n\ndef buildJsonResult(helper, jsonResult):\n    items = []\n\n    for item in jsonResult['result']['items']:\n        state = helper.get_check_point(item[\"id\"])\n        if state is None:\n            items.append(item)\n            helper.save_check_point(item[\"id\"], \"Indexed\")\n        # else: #this would be used to delete an existing entry and add a new one. Possibly to update a value.\n        #     helper.delete_check_point(item[\"id\"])\n        #     items.append(item)\n        #     helper.save_check_point(item[\"id\"], \"Indexed\")\n        # UNCOMMENT THIS LINE WHILE TESTING\n        helper.delete_check_point(item[\"id\"])\n    return items\n\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\n\ndef validate_input(helper, definition):\n    # This example accesses the modular input variable\n    # collection_name = definition.parameters.get('collection_name', None)\n    # item_type = definition.parameters.get('item_type', None)\n    # date = definition.parameters.get('date', None)\n    pass\n\n\ndef collect_events(helper, ew):\n    loglevel = helper.get_log_level()\n    # (log_level can be \"debug\", \"info\", \"warning\", \"error\" or \"critical\", case insensitive)\n    helper.set_log_level(loglevel)\n    opt_collection_name = helper.get_arg('collection_name')\n    opt_item_type = helper.get_arg('item_type')\n    opt_date = helper.get_arg('start_date')\n    opt_access_key = helper.get_arg(\"access_key\")\n    opt_secret_key = helper.get_arg(\"secret_key\")\n    helper.log_debug(\"collected data from fields\")\n    # get input type\n    try:\n        header = Header(opt_access_key, opt_secret_key)\n        url = UrlBuilder(opt_collection_name, opt_item_type, opt_date)\n    except:\n        helper.log_debug(\"Error occurred when creating the request.\")\n        raise Exception(\"Error occurred when creating the request.\")\n\n    helper.log_debug(\"built url and headers\")\n    response = helper.send_http_request(url.build(),\n                                        'GET',\n                                        parameters=None,\n                                        payload=None,\n                                        headers=header.Authorization,\n                                        cookies=None,\n                                        verify=True,\n                                        cert=None,\n                                        timeout=None,\n                                        use_proxy=True)\n    helper.log_debug(\"got response back from API\")\n    r_status = response.status_code\n    helper.log_debug(f\"got status code back from API {r_status}\")\n    if r_status != 200:\n        response.raise_for_status()\n        raise Exception(\"Error occurred when retrieving data.\")\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    helper.log_debug(\"started building json\")\n    items = buildJsonResult(helper, r_json)\n    helper.log_debug(\"finished building json\")\n    # To create a splunk event\n    event = helper.new_event(json.dumps(items), time=None, host=None,\n                             index=None, source=None, sourcetype=None, done=True, unbroken=True)\n    helper.log_debug(\"created new event\")\n    ew.write_event(event)\n    helper.log_debug(\"finished writing event\")\n", "customized_options": [{"name": "collection_name", "value": "adm_EroCCmU"}, {"name": "item_type", "value": "issues"}, {"name": "start_date", "value": "2011-01-01"}], "uuid": "cf3358f3060242e0b28f8ec2475a7cbe", "sample_count": "3148"}]}, "field_extraction_builder": {"Intrigue_data_input": {"is_parsed": true, "data_format": "json"}}, "global_settings_builder": {"global_settings": {"proxy_settings": {"proxy_type": "http", "proxy_enabled": false}, "log_settings": {"log_level": "DEBUG"}}}, "sourcetype_builder": {"Intrigue_data_input": {"metadata": {"event_count": 0, "data_input_name": "Intrigue", "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_finished", "validation_id": "v_1602878769_29", "progress": 1.0}}